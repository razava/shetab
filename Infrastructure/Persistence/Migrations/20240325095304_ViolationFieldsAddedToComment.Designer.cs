// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240325095304_ViolationFieldsAddedToComment")]
    partial class ViolationFieldsAddedToComment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorProcessStage", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("StagesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "StagesId");

                    b.HasIndex("StagesId");

                    b.ToTable("ActorProcessStage");
                });

            modelBuilder.Entity("ActorRegion", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("RegionsId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "RegionsId");

                    b.HasIndex("RegionsId");

                    b.ToTable("ActorRegion");
                });

            modelBuilder.Entity("ApplicationRoleChart", b =>
                {
                    b.Property<int>("ChartsId")
                        .HasColumnType("int");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChartsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ApplicationRoleChart");
                });

            modelBuilder.Entity("Domain.Models.Gov.GovAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "buildingName");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("EnProvince")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "enProvince");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "errorCode");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "floor");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "houseNumber");

                    b.Property<int>("LocalityCode")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "localityCode");

                    b.Property<string>("LocalityName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "localityName");

                    b.Property<string>("LocalityType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "localityType");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "postCode");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "province");

                    b.Property<string>("SideFloor")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "sideFloor");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "street");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "street2");

                    b.Property<string>("SubLocality")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "subLocality");

                    b.Property<string>("TownShip")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "townShip");

                    b.Property<string>("TraceID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "traceID");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "village");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "zone");

                    b.HasKey("Id");

                    b.ToTable("GovAddress");

                    b.HasAnnotation("Relational:JsonPropertyName", "address");
                });

            modelBuilder.Entity("Domain.Models.Gov.GovFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GovUserInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonNin")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "personNin");

                    b.Property<string>("RelationType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "relationType");

                    b.HasKey("Id");

                    b.HasIndex("GovUserInfoId");

                    b.ToTable("GovFamily");

                    b.HasAnnotation("Relational:JsonPropertyName", "family");
                });

            modelBuilder.Entity("Domain.Models.Gov.GovSubsidy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apply")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "apply");

                    b.Property<int>("Decile")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "decile");

                    b.Property<string>("FamilyHeadNationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "familyHeadNationalId");

                    b.Property<bool>("Included")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "included");

                    b.Property<bool>("Registered")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "registered");

                    b.Property<bool>("VerifyFamily")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "verifyFamily");

                    b.HasKey("Id");

                    b.ToTable("GovSubsidy");

                    b.HasAnnotation("Relational:JsonPropertyName", "subsidy");
                });

            modelBuilder.Entity("Domain.Models.Gov.GovUserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthCertificatenumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "birthCertificatenumber");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "birthDate");

                    b.Property<string>("BirthDateShamsi")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "birthDateShamsi");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("EnProvince")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "enProvince");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fatherName");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "gender");

                    b.Property<bool>("HasSignPrivateKey")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hasSignPrivateKey");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mobile");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "nationalId");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "postalCode");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "province");

                    b.Property<string>("ShenasnamehNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "shenasnamehNo");

                    b.Property<Guid>("SubsidyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SubsidyId");

                    b.ToTable("GovUserInfos");
                });

            modelBuilder.Entity("Domain.Models.MyYazd.MyYazdUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "access_token");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpiresIn")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "expires_in");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "refresh_token");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "scope");

                    b.Property<string>("TokenType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "token_type");

                    b.HasKey("Id");

                    b.ToTable("MyYazdUserInfo");
                });

            modelBuilder.Entity("Domain.Models.Relational.ApplicationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("ApplicationLink");
                });

            modelBuilder.Entity("Domain.Models.Relational.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultPriority")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("EditingAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HideMap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ObjectionAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseDuration")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Models.Relational.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("DefaultParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("County");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParsimapCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.ShahrbinInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Upload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Upload");
                });

            modelBuilder.Entity("Domain.Models.Relational.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenshipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FcmToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("SmsAlert")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("VerificationSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ExecutiveContractor", b =>
                {
                    b.Property<string>("ExecutiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExecutiveId", "ContractorId");

                    b.HasIndex("ContractorId");

                    b.ToTable("ExecutiveContractor");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.OperatorCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId", "OperatorId");

                    b.HasIndex("OperatorId");

                    b.ToTable("OperatorCategory");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ReportLikes", b =>
                {
                    b.Property<string>("LikedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikedById", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportLikes");
                });

            modelBuilder.Entity("Domain.Models.Relational.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Domain.Models.Relational.OrganizationalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationalUnit");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PollType")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.PollAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("PollAnswer");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.PollChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollChoice");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BotActorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BotActorId")
                        .IsUnique()
                        .HasFilter("[BotActorId] IS NOT NULL");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.BotActor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DestinationActorId")
                        .HasColumnType("int");

                    b.Property<string>("MessageToCitizen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonMeaning")
                        .HasColumnType("int");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.Property<int?>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationActorId");

                    b.HasIndex("TransitionId");

                    b.ToTable("BotActors");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RevisionUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RevisionUnitId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Process");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.ProcessReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonMeaning")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcessReason");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.ProcessStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayRoleId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessStage");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.ProcessTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanSendMessageToCitizen")
                        .HasColumnType("bit");

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTransitionLogPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("ReportState")
                        .HasColumnType("int");

                    b.Property<string>("Routine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.Property<int>("TransitionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ToId");

                    b.ToTable("ProcessTransition");
                });

            modelBuilder.Entity("Domain.Models.Relational.QuickAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("QuickAccess");
                });

            modelBuilder.Entity("Domain.Models.Relational.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("ContractorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CurrentActorId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentStageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("ExecutiveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("datetime2");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<string>("InspectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeedbacked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIdentityVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObjectioned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViolationChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("LastOperation")
                        .HasColumnType("int");

                    b.Property<int?>("LastReasonId")
                        .HasColumnType("int");

                    b.Property<string>("LastStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastStatusDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastTransitionId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RegistrantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReportState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseDeadline")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ResponseDuration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Responsed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViolationCount")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CurrentActorId");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("ExecutiveId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("LastReasonId");

                    b.HasIndex("LastTransitionId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RegistrantId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViolationChecked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViolationCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TryCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("ShahrbinInstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastSentPush")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSentSms")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageSendingType")
                        .HasColumnType("int");

                    b.Property<int>("MessageSubject")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.ReportNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportNote");
                });

            modelBuilder.Entity("Domain.Models.Relational.RevisionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RevisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RevisorId");

                    b.ToTable("RevisionUnit");
                });

            modelBuilder.Entity("Domain.Models.Relational.Satisfaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("Satisfaction");
                });

            modelBuilder.Entity("Domain.Models.Relational.TransitionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActorIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActorType")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReasonId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReportLogType")
                        .HasColumnType("int");

                    b.Property<int?>("TransitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReasonId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TransitionId");

                    b.ToTable("TransitionLogs");
                });

            modelBuilder.Entity("Domain.Models.Relational.Violation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShahrbinInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ViolationCheckResult")
                        .HasColumnType("int");

                    b.Property<int>("ViolationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ViolatoinCheckDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ShahrbinInstanceId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViolationTypeId");

                    b.ToTable("Violation");
                });

            modelBuilder.Entity("Domain.Models.Relational.ViolationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ViolationType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrganizationalUnitOrganizationalUnit", b =>
                {
                    b.Property<int>("OrganizationalUnitsId")
                        .HasColumnType("int");

                    b.Property<int>("ParentOrganizationalUnitsId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationalUnitsId", "ParentOrganizationalUnitsId");

                    b.HasIndex("ParentOrganizationalUnitsId");

                    b.ToTable("OrganizationalUnitOrganizationalUnit");
                });

            modelBuilder.Entity("PollAnswerPollChoice", b =>
                {
                    b.Property<Guid>("AnswersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChoicesId")
                        .HasColumnType("int");

                    b.HasKey("AnswersId", "ChoicesId");

                    b.HasIndex("ChoicesId");

                    b.ToTable("PollAnswerPollChoice");
                });

            modelBuilder.Entity("ProcessReasonProcessTransition", b =>
                {
                    b.Property<int>("ReasonListId")
                        .HasColumnType("int");

                    b.Property<int>("TransitionsId")
                        .HasColumnType("int");

                    b.HasKey("ReasonListId", "TransitionsId");

                    b.HasIndex("TransitionsId");

                    b.ToTable("ProcessReasonProcessTransition");
                });

            modelBuilder.Entity("ActorProcessStage", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessStage", null)
                        .WithMany()
                        .HasForeignKey("StagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorRegion", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Common.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationRoleChart", b =>
                {
                    b.HasOne("Domain.Models.Relational.Chart", null)
                        .WithMany()
                        .HasForeignKey("ChartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Gov.GovFamily", b =>
                {
                    b.HasOne("Domain.Models.Gov.GovUserInfo", null)
                        .WithMany("Family")
                        .HasForeignKey("GovUserInfoId");
                });

            modelBuilder.Entity("Domain.Models.Gov.GovUserInfo", b =>
                {
                    b.HasOne("Domain.Models.Gov.GovAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Gov.GovSubsidy", "Subsidy")
                        .WithMany()
                        .HasForeignKey("SubsidyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Subsidy");
                });

            modelBuilder.Entity("Domain.Models.MyYazd.MyYazdUserInfo", b =>
                {
                    b.OwnsOne("Domain.Models.MyYazd.MyYazdUser", "User", b1 =>
                        {
                            b1.Property<Guid>("MyYazdUserInfoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "address");

                            b1.Property<string>("Avatar")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "avatar");

                            b1.Property<int?>("Balance")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "balance");

                            b1.Property<string>("Birthday")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "birthday");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "first_name");

                            b1.Property<int?>("Gender")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "gender");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "last_name");

                            b1.Property<string>("MobileNo")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "mobile_no");

                            b1.Property<string>("NationalId")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "national_id");

                            b1.Property<int?>("Point")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "point");

                            b1.Property<string>("Tel")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "tel");

                            b1.Property<string>("Username")
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "username");

                            b1.HasKey("MyYazdUserInfoId");

                            b1.ToTable("MyYazdUserInfo");

                            b1.HasAnnotation("Relational:JsonPropertyName", "user");

                            b1.WithOwner()
                                .HasForeignKey("MyYazdUserInfoId");
                        });

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.ApplicationLink", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.Common.Media", "Image", b1 =>
                        {
                            b1.Property<int>("ApplicationLinkId")
                                .HasColumnType("int");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationLinkId");

                            b1.ToTable("ApplicationLink");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLinkId");
                        });

                    b.Navigation("Image");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.Category", b =>
                {
                    b.HasOne("Domain.Models.Relational.ReportAggregate.Form", "Form")
                        .WithMany("Categories")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Relational.Category", "Parent")
                        .WithMany("Categories")
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationRole", "Role")
                        .WithMany("Categories")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Parent");

                    b.Navigation("Process");

                    b.Navigation("Role");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.Chart", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.City", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.District", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.County", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.Province", "Province")
                        .WithMany("Counties")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.District", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.County", "County")
                        .WithMany("Districts")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Region", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.ShahrbinInstance", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Upload", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.Common.Media", "Media", b1 =>
                        {
                            b1.Property<Guid>("UploadId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UploadId");

                            b1.ToTable("Upload");

                            b1.WithOwner()
                                .HasForeignKey("UploadId");
                        });

                    b.Navigation("Media")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.Faq", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Domain.Models.Relational.Common.Address", "Address", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("RegionId")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Valley")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId");

                            b1.HasIndex("RegionId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");

                            b1.HasOne("Domain.Models.Relational.Common.Region", "Region")
                                .WithMany()
                                .HasForeignKey("RegionId");

                            b1.Navigation("Region");
                        });

                    b.OwnsOne("Domain.Models.Relational.Common.Media", "Avatar", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Avatar");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ExecutiveContractor", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Executive")
                        .WithMany()
                        .HasForeignKey("ExecutiveId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Executive");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.OperatorCategory", b =>
                {
                    b.HasOne("Domain.Models.Relational.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ReportLikes", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "LikedBy")
                        .WithMany()
                        .HasForeignKey("LikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedBy");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Domain.Models.Relational.News", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.Common.Media", "Image", b1 =>
                        {
                            b1.Property<int>("NewsId")
                                .HasColumnType("int");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("NewsId");

                            b1.ToTable("News");

                            b1.WithOwner()
                                .HasForeignKey("NewsId");
                        });

                    b.Navigation("Image");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.OrganizationalUnit", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ShahrbinInstance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.Poll", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.PollAnswer", b =>
                {
                    b.HasOne("Domain.Models.Relational.PollAggregate.Poll", null)
                        .WithMany("Answers")
                        .HasForeignKey("PollId")
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.PollChoice", b =>
                {
                    b.HasOne("Domain.Models.Relational.PollAggregate.Poll", null)
                        .WithMany("Choices")
                        .HasForeignKey("PollId");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Actor", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.BotActor", "BotActor")
                        .WithOne("Actor")
                        .HasForeignKey("Domain.Models.Relational.ProcessAggregate.Actor", "BotActorId");

                    b.Navigation("BotActor");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.BotActor", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Actor", "DestinationActor")
                        .WithMany()
                        .HasForeignKey("DestinationActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessTransition", "Transition")
                        .WithMany()
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationActor");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Process", b =>
                {
                    b.HasOne("Domain.Models.Relational.RevisionUnit", "RevisionUnit")
                        .WithMany()
                        .HasForeignKey("RevisionUnitId");

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RevisionUnit");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.ProcessStage", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationRole", "DisplayRole")
                        .WithMany()
                        .HasForeignKey("DisplayRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Process", null)
                        .WithMany("Stages")
                        .HasForeignKey("ProcessId");

                    b.Navigation("DisplayRole");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.ProcessTransition", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessStage", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Process", null)
                        .WithMany("Transitions")
                        .HasForeignKey("ProcessId");

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessStage", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Models.Relational.QuickAccess", b =>
                {
                    b.HasOne("Domain.Models.Relational.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.Common.Media", "Media", b1 =>
                        {
                            b1.Property<int>("QuickAccessId")
                                .HasColumnType("int");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QuickAccessId");

                            b1.ToTable("QuickAccess");

                            b1.WithOwner()
                                .HasForeignKey("QuickAccessId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Media")
                        .IsRequired();

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.Report", b =>
                {
                    b.HasOne("Domain.Models.Relational.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Citizen")
                        .WithMany("Reports")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Contractor")
                        .WithMany("ContractorReports")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Actor", "CurrentActor")
                        .WithMany("Reports")
                        .HasForeignKey("CurrentActorId");

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId");

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Executive")
                        .WithMany("ExecutiveReports")
                        .HasForeignKey("ExecutiveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Inspector")
                        .WithMany("InspectorReports")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessReason", "LastReason")
                        .WithMany()
                        .HasForeignKey("LastReasonId");

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessTransition", "LastTransition")
                        .WithMany()
                        .HasForeignKey("LastTransitionId");

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Registrant")
                        .WithMany("RegisteredReports")
                        .HasForeignKey("RegistrantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.Common.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ReportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("RegionId")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Valley")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReportId");

                            b1.HasIndex("RegionId");

                            b1.ToTable("Reports");

                            b1.HasOne("Domain.Models.Relational.Common.Region", "Region")
                                .WithMany()
                                .HasForeignKey("RegionId");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");

                            b1.Navigation("Region");
                        });

                    b.OwnsMany("Domain.Models.Relational.Common.Media", "Medias", b1 =>
                        {
                            b1.Property<Guid>("ReportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ReportId", "Id");

                            b1.ToTable("Reports_Medias");

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Citizen");

                    b.Navigation("Contractor");

                    b.Navigation("CurrentActor");

                    b.Navigation("CurrentStage");

                    b.Navigation("Executive");

                    b.Navigation("Inspector");

                    b.Navigation("LastReason");

                    b.Navigation("LastTransition");

                    b.Navigation("Medias");

                    b.Navigation("Process");

                    b.Navigation("Registrant");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Comment", b =>
                {
                    b.HasOne("Domain.Models.Relational.ReportAggregate.Comment", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId");

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithMany("FeedbackComments")
                        .HasForeignKey("ReportId");

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reply");

                    b.Navigation("Report");

                    b.Navigation("ShahrbinInstance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Feedback", b =>
                {
                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithOne("Feedback")
                        .HasForeignKey("Domain.Models.Relational.ReportAggregate.Feedback", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("ShahrbinInstance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Form", b =>
                {
                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Models.Relational.ReportAggregate.FormElement", "Elements", b1 =>
                        {
                            b1.Property<Guid>("FormId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ElementType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Meta")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FormId", "Id");

                            b1.ToTable("FormElement");

                            b1.WithOwner()
                                .HasForeignKey("FormId");
                        });

                    b.Navigation("Elements");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Message", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithMany("Messages")
                        .HasForeignKey("ReportId");

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Relational.ReportAggregate.MessageRecepient", "Recepient", b1 =>
                        {
                            b1.Property<Guid>("MessageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ToId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("MessageId");

                            b1.ToTable("Message");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("From");

                    b.Navigation("Recepient")
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("ShahrbinInstance");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.ReportNote", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Domain.Models.Relational.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Relational.RevisionUnit", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Revisor")
                        .WithMany()
                        .HasForeignKey("RevisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revisor");
                });

            modelBuilder.Entity("Domain.Models.Relational.Satisfaction", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithOne("Satisfaction")
                        .HasForeignKey("Domain.Models.Relational.Satisfaction", "ReportId");

                    b.Navigation("Actor");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Domain.Models.Relational.TransitionLog", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId");

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithMany("TransitionLogs")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessTransition", "Transition")
                        .WithMany()
                        .HasForeignKey("TransitionId");

                    b.OwnsMany("Domain.Models.Relational.Common.Media", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("TransitionLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransitionLogId", "Id");

                            b1.ToTable("TransitionLogs_Attachments");

                            b1.WithOwner()
                                .HasForeignKey("TransitionLogId");
                        });

                    b.Navigation("Attachments");

                    b.Navigation("Reason");

                    b.Navigation("Report");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Domain.Models.Relational.Violation", b =>
                {
                    b.HasOne("Domain.Models.Relational.ReportAggregate.Comment", "Comment")
                        .WithMany("Violations")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Models.Relational.Report", "Report")
                        .WithMany("Violations")
                        .HasForeignKey("ReportId");

                    b.HasOne("Domain.Models.Relational.Common.ShahrbinInstance", "ShahrbinInstance")
                        .WithMany()
                        .HasForeignKey("ShahrbinInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ViolationType", "ViolationType")
                        .WithMany()
                        .HasForeignKey("ViolationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Report");

                    b.Navigation("ShahrbinInstance");

                    b.Navigation("User");

                    b.Navigation("ViolationType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.Relational.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganizationalUnitOrganizationalUnit", b =>
                {
                    b.HasOne("Domain.Models.Relational.OrganizationalUnit", null)
                        .WithMany()
                        .HasForeignKey("OrganizationalUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.OrganizationalUnit", null)
                        .WithMany()
                        .HasForeignKey("ParentOrganizationalUnitsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PollAnswerPollChoice", b =>
                {
                    b.HasOne("Domain.Models.Relational.PollAggregate.PollAnswer", null)
                        .WithMany()
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.PollAggregate.PollChoice", null)
                        .WithMany()
                        .HasForeignKey("ChoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessReasonProcessTransition", b =>
                {
                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Relational.ProcessAggregate.ProcessTransition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Gov.GovUserInfo", b =>
                {
                    b.Navigation("Family");
                });

            modelBuilder.Entity("Domain.Models.Relational.Category", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.City", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.County", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.District", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Models.Relational.Common.Province", b =>
                {
                    b.Navigation("Counties");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ApplicationRole", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Domain.Models.Relational.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Navigation("ContractorReports");

                    b.Navigation("ExecutiveReports");

                    b.Navigation("InspectorReports");

                    b.Navigation("RegisteredReports");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Models.Relational.PollAggregate.Poll", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Actor", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.BotActor", b =>
                {
                    b.Navigation("Actor")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Relational.ProcessAggregate.Process", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Domain.Models.Relational.Report", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("FeedbackComments");

                    b.Navigation("Messages");

                    b.Navigation("Satisfaction");

                    b.Navigation("TransitionLogs");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Comment", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("Domain.Models.Relational.ReportAggregate.Form", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
